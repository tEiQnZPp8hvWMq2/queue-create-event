syntax = "proto3";
package event_condition;
import "./event_by_agent.proto";
// option java_multiple_files = true;

// import "google/protobuf/struct.proto";


message OptionsWithRelation {
  bool id = 1;
  bool event_id = 2;
  bool agent_id = 3;
  bool amount = 4;
  bool type_receive = 5;
  bool type_status = 6;
  bool condition_date = 7;
  bool start_date = 8;
  bool end_date = 9;
  bool redeem_code = 10;
  bool created_at = 11;
  bool updated_at = 12;
  // event_by_agent.EventByAgentObject event = 13;
  bool min_receive = 14;
  bool condition_amount = 15;
  bool condition_game_type = 16;
}


// ***** EventConditionObject Objects ***** //
message EventConditionObject {
  string id = 1;
  string event_id = 2;
  string agent_id = 3;
  double amount = 4;
  string type_receive = 5;
  string type_status = 6;
  string condition_date = 7;
  string start_date = 8;
  string end_date = 9;
  string redeem_code = 10;
  string created_at = 11;
  string updated_at = 12;
  event_by_agent.EventByAgentObject event = 13;
  double min_receive = 14;
  string condition_amount = 15;
  repeated string condition_game_type = 16;
}

message Options {
  repeated string relations = 1;
  repeated string select = 2;
  int32 skip = 3;
  int32 take = 4;
  map<string,string> order = 5;
  bool loadRelationIds = 6;
}

// ***** EventConditionObject Objects ***** //


// ***** EventConditionObject Status Response ***** //
message StatusResponse {
  bool successful = 1;
  int32 code = 2;
  string message = 3;
}
// ***** EventConditionObject Status Response ***** //

// ***** RequestResponse Insert ***** //
message InsertRequest {
  InsertRequestObject request = 1;
}

message InsertRequestObject {
    string event_id = 1;
    string agent_id = 2;
    double amount = 3;
    string type_receive = 4;
    string type_status = 5;
    string condition_date = 6;
    string start_date = 7;
    string end_date = 8;
    string redeem_code = 9;
    string created_at = 10;
    string updated_at = 11;
    double min_receive = 12;
    string condition_amount = 13;
    repeated string condition_game_type = 14;
}

message InsertResponse {
  InsertResponseObject response = 1;
}

message InsertResponseObject {
  oneof ResponseType 
  {
     StatusResponse status = 1;
     DataInsertResponseObject data = 2;
  }
}

message DataInsertResponseObject {
  repeated DataRawInsertResponseObject raw = 1; 
}

message DataRawInsertResponseObject {
    string id = 1;
    string event_id = 2;
    string agent_id = 3;
    double amount = 4;
    string type_receive = 5;
    string type_status = 6;
    string condition_date = 7;
    string start_date = 8;
    string end_date = 9;
    string redeem_code = 10;
    string created_at = 11;
    string updated_at = 12;
    double min_receive = 13;
    string condition_amount = 14;
    repeated string condition_game_type = 15;
}

// ***** RequestResponse Insert ***** //

// ***** RequestResponse FindOne ***** //
message FindOneRequest {
  FindOneRequestObject request = 1;
}

message FindOneRequestObject{
  EventConditionObject where = 1;
  Options options = 2;
}

message FindOneResponse {
  FindOneResponseObject response = 1;
}

message FindOneResponseObject {
  oneof ResponseType 
  {
     StatusResponse status = 1;
     EventConditionObject data = 2;
  }
}

// ***** RequestResponse FindOne ***** //

// ***** RequestResponse FindAll ***** //
message FindAllRequest {
  FindAllRequestObject request = 1;
}

message FindAllRequestObject{
  EventConditionObject where = 1;
  Options options = 2;
}

message FindAllResponse {
  FindAllResponseObject response = 1;
}

message FindAllResponseObject {
  oneof ResponseType 
  {
     StatusResponse status = 1;
  }
  repeated EventConditionObject data = 2;
}

// ***** RequestResponse FindAll ***** //

// ***** RequestResponse FindAllWhere ***** //
message FindAllWhereRequest {
  string request = 1;
}

message FindAllWhereRequestObject{
  map<string,string> where = 1;
  FindOptions options = 2;
  repeated string args = 3;
}

message FindAllWhereResponse {
  FindAllWhereResponseObject response = 1;
}

message FindAllWhereResponseObject {
  oneof ResponseType 
  {
     StatusResponse status = 1;
  }
  repeated EventConditionObject data = 2;
}

message FindOptions {
  repeated string relations = 1;
  repeated string select = 2;
  int32 skip = 3;
  int32 take = 4;
  map<string,string> order = 5;
}
// ***** RequestResponse FindAllWhere ***** //

// ***** RequestResponse Update ***** //
message UpdateRequest {
  EventConditionObject request = 1;
  EventConditionObject update = 2;
}

message UpdateResponse {
  UpdateResponseObject response = 1;
}

message UpdateResponseObject {
  oneof ResponseType 
  {
      StatusResponse status = 1;
      DataUpdateResponseObject data = 2;
  }
}

message DataUpdateResponseObject {
  int32 affected = 1;
  repeated DataRawUpdateResponseObject raw = 2;
}

message DataRawUpdateResponseObject {
    string id = 1;
    string event_id = 2;
    string agent_id = 3;
    double amount = 4;
    string type_receive = 5;
    string type_status = 6;
    string condition_date = 7;
    string start_date = 8;
    string end_date = 9;
    string redeem_code = 10;
    string created_at = 11;
    string updated_at = 12;
    double min_receive = 13;
    string condition_amount = 14;
    repeated string condition_game_type = 15;
}
// ***** RequestResponse Update ***** //

// ***** RequestResponse Delete ***** //
message DeleteRequest {
  EventConditionObject request = 1;
}

message DeleteObject {
  string id = 1;
}

message DeleteResponse {
  DeleteResponseObject response = 1;
}

message DeleteResponseObject {
  oneof ResponseType 
  {
      StatusResponse status = 1;
      DataDeleteResponseObject data = 2;
  }
}

message DataDeleteResponseObject {
  int32 affected = 1;
  repeated DataRawDeleteResponseObject raw = 2;
}

message DataRawDeleteResponseObject {
    string id = 1;
    string event_id = 2;
    string agent_id = 3;
    double amount = 4;
    string type_receive = 5;
    string type_status = 6;
    string condition_date = 7;
    string start_date = 8;
    string end_date = 9;
    string redeem_code = 10;
    string created_at = 11;
    string updated_at = 12;
    double min_receive = 13;
    string condition_amount = 14;
    repeated string condition_game_type = 15;
}
// ***** RequestResponse Delete ***** //


// ***** RequestResponse Count ***** //
message CountRequest {
  CountRequestObject request = 1;
}

message CountRequestObject {
  EventConditionObject where = 1;
}

message CountResponse {
  CountResponseObject response = 1;
}

message CountResponseObject {
  oneof ResponseType 
  {
    StatusResponse status = 1;
    DataCountResponseObject data = 2;
  }
}

message DataCountResponseObject {
  int32 count = 1;
}
// ***** RequestResponse Count ***** //

// ***** RequestResponse CountAllWhere ***** //
message CountAllWhereRequest {
  string request = 1;
}

message CountAllWhereRequestObject {
  EventConditionObject where = 1;
  Options options = 2;
  repeated string args = 3;
}

message CountAllWhereResponse {
  CountAllWhereResponseObject response = 1;
}

message CountAllWhereResponseObject {
  oneof ResponseType 
  {
    StatusResponse status = 1;
    DataCountAllWhereResponseObject data = 2;
  }
}

message DataCountAllWhereResponseObject {
  int32 count = 1;
}

message CountOptions {
  repeated string relations = 1;
  repeated string select = 2;
  int32 skip = 3;
  int32 take = 4;
  map<string,string> order = 5;
}
// ***** RequestResponse CountAllWhere ***** //

// ***** RequestResponse Query ***** //
message QueryRequest {
  string request = 1;
}

message QueryResponse {
  string response = 1;
}
// ***** RequestResponse Query ***** //

service EventConditionService {
  rpc Insert (InsertRequest) returns (InsertResponse) {}
  rpc FindOne (FindOneRequest) returns (FindOneResponse) {}
  rpc FindAll (FindAllRequest) returns (FindAllResponse) {}
  rpc FindAllWhere (FindAllWhereRequest) returns (FindAllWhereResponse) {}
  rpc Update (UpdateRequest) returns (UpdateResponse) {}
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}
  rpc Count (CountRequest) returns (CountResponse) {}
  rpc CountAllWhere (CountAllWhereRequest) returns (CountAllWhereResponse) {}
  rpc Query (QueryRequest) returns (QueryResponse) {}
}

